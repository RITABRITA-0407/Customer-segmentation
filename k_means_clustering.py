# -*- coding: utf-8 -*-
"""K-Means clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r33j1UEgDjXtD6_RHyYQLuRiVdZUZPtJ

# Project 3: K-Means Clustering for Customer Segmentaon
Goal: Segment customers based on annual income and spending score using the K-Means
clustering algorithm.
"""

# Import necessary libraries
import pandas as pd # For data manipulation
import matplotlib.pyplot as plt # For plotting
import seaborn as sns # For visualization
from sklearn.cluster import KMeans # KMeans clustering algorithm
from sklearn.preprocessing import StandardScaler # For feature scaling

from google.colab import files
uploaded=files.upload()

df = pd.read_csv("Mall_Customers.csv") # Replace with your path

# Display the first few rows
print(df.head())

"""Step 3: Explore and Clean the Data"""

# Check column names
print(df.columns)

# Drop CustomerID as itâ€™s not informative
df = df.drop('CustomerID', axis=1)

# Convert categorical Gender into numeric
df['Genre'] = df['Genre'].map({'Male': 0, 'Female': 1})

# Basic data info
print(df.info())

"""Step 4: Select Features for Clustering"""

# Select relevant features for segmentation
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Optional: Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""Step 5: Determine Opmal Number of Clusters (Elbow Method)"""

# Use Elbow Method to find optimal number of clusters
inertia = [] # Inertia = sum of squared distances to nearest cluster center

for k in range(1, 11):
 kmeans = KMeans(n_clusters=k, random_state=42)
 kmeans.fit(X_scaled)
 inertia.append(kmeans.inertia_)

# Plot the Elbow Curve
plt.figure(figsize=(8, 4))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method For Optimal K')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.grid(True)
plt.show()

"""Step 6: Apply K-Means Clustering"""

# Based on elbow curve, choose k=5 (for example)
kmeans = KMeans(n_clusters=5, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# View clustered data
print(df.head())

"""Step 7: Visualize the Clusters"""

# Plot the clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(
x=df['Annual Income (k$)'],
y=df['Spending Score (1-100)'],
hue=df['Cluster'],
palette='tab10'
)
plt.title('Customer Segments by K-Means')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()